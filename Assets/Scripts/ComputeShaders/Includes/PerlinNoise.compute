#ifndef Perlin_Noise_
#define Perlin_Noise_

#include "Perlin2D.compute"
#include "Perlin3D.compute"

/*Utils*/
//3D Perlin
float Perlin(float x, float y, float z, float scale, float presistance, float lacunarity, int octaves, StructuredBuffer<float3> mapOctaveOffsets)
{
	//Height value
    float total = 0;
    float frequency = 1;
    float amplitude = 1;
    float totalAmplitude = 0;

    for (int i = 0; i < octaves; i++)
    {
        float mapX = x / scale * frequency + mapOctaveOffsets[i].x;
        float mapY = y / scale * frequency + mapOctaveOffsets[i].y;
        float mapZ = z / scale * frequency + mapOctaveOffsets[i].z;

        total += cnoise(float3(mapX, mapY, mapZ)) * amplitude;
        totalAmplitude += amplitude;

        amplitude *= presistance;
        frequency *= lacunarity;
    }
    //total = abs(total);
    return total;
}

//2D Perlin
float Perlin(float x, float y, float scale, float presistance, float lacunarity, int octaves, StructuredBuffer<float3> mapOctaveOffsets)
{
	//Height value
    float total = 0;
    float frequency = 1;
    float amplitude = 1;
    float totalAmplitude = 0;

    for (int i = 0; i < octaves; i++)
    {
        float mapX = x / scale * frequency + mapOctaveOffsets[i].x;
        float mapY = y / scale * frequency + mapOctaveOffsets[i].y;

        total += cnoise(float2(mapX, mapY)) * amplitude;
        totalAmplitude += amplitude;

        amplitude *= presistance;
        frequency *= lacunarity;
    }
    //total = abs(total);
    return total;
}
#endif